---
- name: include variables
  include_vars:
    file: "{{ service_name }}.yml"

- name: Create VPC
  ec2_vpc_net:
    state: present
    region: "{{ aws_region }}"
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    dns_hostnames: yes
    dns_support: yes
    multi_ok: no
    tenancy: default
    profile: "{{ aws_profile }}"
    tags:
      Name: "{{ vpc_name }}"
      app: "{{ service_name }}"
  register: service_vpc

- name: Create Internet Gateway
  ec2_vpc_igw:
    state: present
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ service_vpc.vpc.id }}"
    tags:
      Name: "{{ service_name }}"
      app: "{{ service_name }}"
  register: "service_igw"

- name: Create subnets
  ec2_vpc_subnet:
    state: present
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    az: "{{ item.value.az }}"
    vpc_id: "{{ service_vpc.vpc.id }}"
    cidr: "{{ item.value.cidr }}"
    tags:
      Name: "{{ service_name }}_{{ item.value.az }}"
      app: "{{ service_name }}"
  with_dict: "{{ vpc_subnets }}"
  register: service_vpc_subnets

- name: Grab the route tables
  ec2_vpc_route_table_info:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ service_vpc.vpc.id }}"
  register: service_route_table

- name: Update the route table in the vpc
  ec2_vpc_route_table:
    state: present
    lookup: id
    route_table_id: "{{ service_route_table.route_tables[0].id }}"
    vpc_id: "{{ service_vpc.vpc.id }}"
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ service_name }}_route_table_{{ service_vpc.vpc.id }}"
      app: "{{ service_name }}"
    subnets:
        - "{{ service_vpc_subnets.results[0].subnet.id }}"
        - "{{ service_vpc_subnets.results[1].subnet.id }}"
        - "{{ service_vpc_subnets.results[2].subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ service_igw.gateway_id }}"
  register: service_route_table_updated

- name: Create vpc security groups
  ec2_group:
    state: present
    profile: "{{ aws_profile}}"
    region: "{{ aws_region }}"
    vpc_id: "{{ service_vpc.vpc.id }}"
    name: "{{ service_name }}_sg_{{ service_vpc.vpc.id }}"
    description: "service security group for {{ service_vpc.vpc.id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    tags:
      Name: "{{ service_name }}_sg"
      app: "{{ service_name }}"
  register: service_sg
  when: (service_name == "jenkins") or (service_name == "atlantis")

- name: Create rds subnet group
  rds_subnet_group:
    state: present
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    name: "{{ service_name }}_subnet_group_{{ service_vpc.vpc.id }}"
    description: Subnet Group For RDS Insatnces
    subnets:
      - "{{ service_vpc_subnets.results[0].subnet.id }}"
      - "{{ service_vpc_subnets.results[1].subnet.id }}"
      - "{{ service_vpc_subnets.results[2].subnet.id }}"
  when: service_name == "rds"